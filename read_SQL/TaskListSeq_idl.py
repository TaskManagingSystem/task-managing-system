# Python stubs generated by omniidl from idl/TaskListSeq.idl
# DO NOT EDIT THIS FILE!

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA


_omnipy.checkVersion(4,2, __file__, 1)

try:
    property
except NameError:
    def property(*args):
        return None


#
# Start of module "_GlobalIDL"
#
__name__ = "_GlobalIDL"
_0__GlobalIDL = omniORB.openModule("_GlobalIDL", r"idl/TaskListSeq.idl")
_0__GlobalIDL__POA = omniORB.openModule("_GlobalIDL__POA", r"idl/TaskListSeq.idl")


# #include "BasicDataType.idl"
import BasicDataType_idl
_0_RTC = omniORB.openModule("RTC")
_0_RTC__POA = omniORB.openModule("RTC__POA")

# struct TaskListSeq
_0__GlobalIDL.TaskListSeq = omniORB.newEmptyClass()
class TaskListSeq (omniORB.StructBase):
    _NP_RepositoryId = "IDL:TaskListSeq:1.0"

    def __init__(self, tm, task_id, start_time, finish_time, target, status, title, discription):
        self.tm = tm
        self.task_id = task_id
        self.start_time = start_time
        self.finish_time = finish_time
        self.target = target
        self.status = status
        self.title = title
        self.discription = discription

_0__GlobalIDL.TaskListSeq = TaskListSeq
_0__GlobalIDL._d_TaskListSeq  = (omniORB.tcInternal.tv_struct, TaskListSeq, TaskListSeq._NP_RepositoryId, "TaskListSeq", "tm", omniORB.typeMapping["IDL:RTC/Time:1.0"], "task_id", (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_long, 0), "start_time", (omniORB.tcInternal.tv_sequence, (omniORB.tcInternal.tv_string,0), 0), "finish_time", (omniORB.tcInternal.tv_sequence, (omniORB.tcInternal.tv_string,0), 0), "target", (omniORB.tcInternal.tv_sequence, (omniORB.tcInternal.tv_string,0), 0), "status", (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_boolean, 0), "title", (omniORB.tcInternal.tv_sequence, (omniORB.tcInternal.tv_string,0), 0), "discription", (omniORB.tcInternal.tv_sequence, (omniORB.tcInternal.tv_string,0), 0))
_0__GlobalIDL._tc_TaskListSeq = omniORB.tcInternal.createTypeCode(_0__GlobalIDL._d_TaskListSeq)
omniORB.registerType(TaskListSeq._NP_RepositoryId, _0__GlobalIDL._d_TaskListSeq, _0__GlobalIDL._tc_TaskListSeq)
del TaskListSeq

#
# End of module "_GlobalIDL"
#
__name__ = "TaskListSeq_idl"

_exported_modules = ( "_GlobalIDL", )

# The end.
